uniform_bool enableHalation {
	header = "General";
    default = true;
	display_name = "Enable Effect";
}	

uniform_float halationStrength {
	header = "Halation";
	display_name = "Halation Strength";
	description = "Overall strength of the effect";
    default = 0.6;
    step = 0.1;
    min = 0.0;
    max = 1.0;
}

uniform_float halationRadius {
	display_name = "Halation Radius";
	description = "Sets the overall radius of the halation";
    default = 1.4;
    min = 0.0;
    max = 5.0;
    step = 0.1;
}

uniform_float halationThreshold {
	display_name = "Halation Threshold";
	description = "Sets the halation threshold determining what has causes halation";
    default = 0.2;
    min = 0.0;
    max = 1.0;
    step = 0.1;
}

uniform_float halationSpread {
	display_name = "Halation Spread";
	description = "Changes how far the halation spreads from the light source onto darker areas";
    default = 0.45;
    min = 0.01;
    max = 1.0;
    step = 0.05;
}

uniform_float halationFalloff {
	display_name = "Halation falloff";
	description = "Changes how quickly halation spread falls off";
    default = 0.8;
    min = 0.5;
    max = 3.0;
    step = 0.1;
}

uniform_float halationHue {
	display_name = "Halation Hue";
	description = "Supposed to change the hue from red to orange but causes a negligible difference";
    default = 0.0;
    min = 0.0;
    max = 10.0;
    step = 0.1;
}

uniform_bool enableAnamorphic {
	header = "Anamorphic";
	display_name = "Enable Anamorphic Spread";
	description = "Stretches the halation to imitate an anamorphic lens";
    default = false;
}

uniform_float halationStretchX {
	display_name = "Horizontal Stretch";
    default = 2.0;
    min = 1.0;
    max = 5.0;
    step = 0.1;
}

uniform_float halationStretchY {
	display_name = "Vertical Stretch";
    default = 1.0;
    min = 0.5;
    max = 2.0;
    step = 0.1;
}

shared {
    vec3 sampleBlur(sampler2D tex, vec2 uv, float radius, vec2 resolution) {
        vec3 color = vec3(0.0);
        float weightSum = 0.0;
        
        for (int x = -4; x <= 4; ++x) {
            for (int y = -4; y <= 4; ++y) {
                vec2 stretch = enableAnamorphic ? vec2(halationStretchX, halationStretchY) : vec2(1.0);
                vec2 offset = vec2(float(x), float(y)) * stretch * radius / resolution;
                float weight = exp(-(x * x + y * y) / (2.0 * radius * radius));
                color += omw_Texture2D(tex, uv + offset).rgb * weight;
                weightSum += weight;
            }
        }

        return color / weightSum;
    }
}

fragment main {
    omw_In vec2 omw_TexCoord;
    void main() {
        vec3 baseColor = omw_GetLastShader(omw_TexCoord).rgb;

        if (!enableHalation) {
            omw_FragColor = vec4(baseColor, 1.0);
            return;
        }

        float luminance = dot(baseColor, vec3(0.299, 0.587, 0.114));
        float minCutoff = halationThreshold;
        float maxCutoff = halationThreshold + (1.0 - halationSpread);
        float mask = smoothstep(minCutoff, maxCutoff, luminance);

        vec2 resolution = vec2(textureSize(omw_SamplerLastShader, 0));
        vec3 blurred = sampleBlur(omw_SamplerLastShader, omw_TexCoord, halationRadius * halationFalloff, resolution);

        vec3 halationTint = mix(vec3(1.0, 0.2, 0.2), vec3(1.0, 0.5, 0.0), halationHue);
        vec3 reddishBlur = blurred * halationTint;
        vec3 edgeGlow = reddishBlur - baseColor;
        edgeGlow = max(edgeGlow, 0.0); // isolate only glow
        float strengthFactor = mix(1.0, 2.0, halationStrength);
        vec3 finalColor = baseColor + edgeGlow * strengthFactor * mask;
        omw_FragColor = vec4(finalColor, 1.0);
    }
}

technique {
    description = "Simplified Halation Shader";
    passes = main;
    version = "1.0";
    author = "Liam Mello";
}
